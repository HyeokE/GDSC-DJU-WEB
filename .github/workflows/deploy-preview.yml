name: Deploy to Preview Channel

on:
  push:
    branches-ignore:
      - master
  pull_request:
    branches-ignore:
      - master
      - develop
jobs:
  Deploy_preview_channel:
    runs-on: ubuntu-latest
    environment:
      name: Preview
      url: ${{ steps.run_firebase_preview.outputs.details_url }}
    steps:
      - uses: actions/checkout@v2
      - run: yarn && yarn build
        env:
          CI: ""
        # Add additional build steps here
      - name: Get short SHA
        id: slug
        run: echo "::set-output name=sha8::$(echo ${GITHUB_SHA} | cut -c1-8)"

      - uses: FirebaseExtended/action-hosting-deploy@v0
        id: run_firebase_preview
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_GDSC_DJU }}'
          projectId: gdsc-dju
          channelId: ' pr-${{ steps.slug.outputs.sha8 }}-${{ github.event.pull_request.head.ref }} '
        env:
          FIREBASE_CLI_PREVIEWS: hostingchannels
      - name: Discord Message Notify
        uses: appleboy/discord-action@0.0.3
        with:
          webhook_id: ${{ secrets.WEBHOOK_ID }}
          webhook_token: ${{ secrets.WEBHOOK_TOKEN }}
          color: "#4285f4"
          args: |
            gdsc-dju-web has been deployed to Preview channel
            `Contributor`: ${{github.actor}}
            `Event Status` ${{github.event_name}}
            `URL` <${{steps.run_firebase_preview.outputs.details_url}}>
            `Build Time` ${{steps.run_firebase_preview.outputs.expire_time}}
      - name: Format lighthouse score
        id: format_lighthouse_score
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');
            # Î≥∏Ïù∏Ïùò ÌôòÍ≤ΩÏóê ÎßûÍ≤å ÏÑ§Ï†ïÌï¥Ï£ºÏÑ∏Ïöî
            const results = JSON.parse(fs.readFileSync("/{Github Actions runner directory}/lhci_reports/manifest.json"));
            # commentÎ•º Îã¥ÏùÑ Î≥ÄÏàò ÏûÖÎãàÎã§.
            let comments = "";
            
            results.forEach((result) => {
              const { summary, jsonPath } = result;
              const { audits } = details;
            
              const details = JSON.parse(fs.readFileSync(jsonPath));
              const formatResult = (res) => Math.round(res * 100);
            
              Object.keys(summary).forEach(
                (key) => (summary[key] = formatResult(summary[key]))
              );
            
              # Ï†êÏàòÍ∞Ä ÏÉâÏÉÅÏúºÎ°ú Íµ¨Î∂ÑÎêòÎäî Î∞©Ïãù (https://web.dev/performance-scoring/#color-coding)
              const score = (res) => (res >= 90 ? "üü¢" : res >= 50 ? "üü†" : "üî¥");

              const comment = [
                `‚ö°Ô∏è Lighthouse report!`,
                `| Category | Score |`,
                `| --- | --- |`,
                `| ${score(summary.performance)} Performance | ${summary.performance} |`,
                { ... }
              ].join("\n");

              const detail = [
                `| Category | Score |`,
                `| --- | --- |`,
                `| ${score(
                  audits["first-contentful-paint"].score * 100
                )} First Contentful Paint | ${
                  audits["first-contentful-paint"].displayValue
                } |`,
                { ... }
              ].join("\n");
              comments += comment + "\n" + detail + "\n";
            });
            # comments Î≥ÄÏàòÏùò Í∞íÏùÑ Îã§Ïùå jobÏúºÎ°ú ÎÑòÍ≤®Ï§çÎãàÎã§.
            core.setOutput('comments', comments)
        - name: comment PR
               uses: unsplash/comment-on-pr@v1.3.0
               env:
                 GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
               with:
                 msg: ${{ steps.format_lighthouse_score.outputs.comments}}